"""
Django settings for project_001 project.

Generated by 'django-admin startproject' using Django 5.1.5.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.1/ref/settings/
"""

from pathlib import Path

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-lp7r((5a$_2izl(3vm-u15ynz4hnr+b7#ol)eqm3z4oexlcb2-'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',   
    'blog.apps.BlogConfig',  # 블로그 앱 추가
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'project_001.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'project_001.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.1/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}


# Password validation
# https://docs.djangoproject.com/en/5.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.1/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.1/howto/static-files/

STATIC_URL = 'static/'

# Default primary key field type
# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'


## 보안 관련 설정

# 비밀번호 암호화 방식 설정
PASSWORD_HASHERS = [
    'django.contrib.auth.hashers.PBKDF2PasswordHasher',
    'django.contrib.auth.hashers.PBKDF2SHA1PasswordHasher',
    'django.contrib.auth.hashers.Argon2PasswordHasher',
    'django.contrib.auth.hashers.BCryptSHA256PasswordHasher',
    'django.contrib.auth.hashers.BCryptPasswordHasher',
]

# CSRF 보안 강화
CSRF_COOKIE_SECURE = True         # HTTPS에서만 CSRF 쿠키 전송
CSRF_COOKIE_HTTPONLY = True       # JavaScript에서 CSRF 토큰 접근 불가 (XSS 방어)
CSRF_COOKIE_SAMESITE = 'Strict'   # 다른 사이트에서 CSRF 쿠키 자동 전송 방지
CSRF_TRUSTED_ORIGINS = ['https://trusted.com']  # 신뢰할 수 있는 도메인 지정

# 세션 보안 설정
SESSION_COOKIE_SECURE = True      # HTTPS에서만 세션 쿠키 전송
SESSION_COOKIE_HTTPONLY = True    # JavaScript에서 세션 쿠키 접근 차단
SESSION_COOKIE_SAMESITE = 'Strict' # 자동 로그인 CSRF 공격 방지

# HSTS 설정 (HTTPS 강제)
SECURE_HSTS_SECONDS = 31536000    # 1년 동안 HTTPS 강제 적용
SECURE_HSTS_INCLUDE_SUBDOMAINS = True  # 서브도메인도 HTTPS 적용
SECURE_HSTS_PRELOAD = True        # 브라우저에서 미리 HTTPS로만 연결

# CORS 설정 (CORS 기반 CSRF 방어)
CORS_ALLOWED_ORIGINS = ['https://trusted.com']
CORS_ALLOW_CREDENTIALS = True


